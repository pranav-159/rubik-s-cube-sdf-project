#version 460 core

layout(points) in;
layout(triangle_strip,max_vertices=15) out;

in vec3 normal[];
in vec3 color[];
in float index[];

out vec3 fcolor;

uniform float TL;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 model;
uniform float feedback[54];

void main()
{
    mat4 modelMatrix=mat4(1.0f);

    if(feedback[int(index[0])]==1)
        modelMatrix=model;

    vec4 centre=gl_in[0].gl_Position;
    vec4 x1=vec4(abs(normal[0]).yzx,0.0f); 
    vec4 x2=vec4(abs(normal[0]).zxy,0.0f);
    vec4 x3=vec4(normal[0],0.0f);

    vec4 p1 = centre - (TL/2)*x1 - (TL/2)*x2;                           //Q3 bottom
    vec4 p2 = centre - 0.90*(TL/2)*x1 - 0.90*(TL/2)*x2;  //Q3 up

    vec4 p3 = centre + (TL/2)*x1 - (TL/2)*x2;                           //Q4 bottom
    vec4 p4 = centre + 0.90*(TL/2)*x1 - 0.90*(TL/2)*x2;  //Q4 up

    vec4 p5 = centre + (TL/2)*x1 + (TL/2)*x2;                          //Q1 bottom
    vec4 p6 = centre + 0.90*(TL/2)*x1 + 0.90*(TL/2)*x2;  //Q1 up

    vec4 p7 = centre - (TL/2)*x1 + (TL/2)*x2;                           //Q2 bottom
    vec4 p8 = centre - 0.90*(TL/2)*x1 + 0.90*(TL/2)*x2;  //Q2 up

    fcolor=vec3(0.0f,0.0f,0.0f);
    gl_Position= projection*view*modelMatrix*p1;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p2;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p3;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p4;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p5;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p6;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p7;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p8;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p1;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p2;
    EmitVertex();
    EndPrimitive();
    
    fcolor=color[0];
    gl_Position= projection*view*modelMatrix*p2;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p4;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p8;
    EmitVertex();
    gl_Position= projection*view*modelMatrix*p6;
    EmitVertex();
    EndPrimitive();  

}